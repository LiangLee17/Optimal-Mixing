// generate a square border mesh

//border
border C0(t=0., 2.*pi){x=t; y=0;}
border C1(t=0., 2.*pi){x=2*pi; y=t;}
border C2(t=0, 2.*pi){x=t; y=2*pi;}
border C3(t=0, 2.*pi){x=0; y=t;}



// mesh
real x0 = 0;
real y0 = 0;
real x1 = 2.*pi;
real y1 = 2.*pi;
int n = 20;
real m = 20;
mesh Th = square(n, m, [x0+(x1-x0)*x, y0+(y1-y0)*y]);

//plot mesh
plot(Th, wait=true);
fespace Vh(Th, P1);
Vh u, v;// Define u and v as piecewise-P1 continuous functions
// Define a function f
func f= x*y;
// Get the clock in second
real cpu=clock();
// Define the PDE
solve Poisson(u, v, solver=LU)
    = int2d(Th)( // The bilinear part
            dx(u)*dx(v)
          + dy(u)*dy(v)
    )
    - int2d(Th)( // The right hand side
            f*v 
    )
    + on(C0, u=0)
    + on(C1, u=0) 
    + on(C2, u=0)
    + on(C3, u=0); // The Dirichlet boundary condition 

// Plot the result
plot(u,wait=true,fill=true);
// Display the total computational time
cout << "CPU time = " << (clock()-cpu) << endl;

