load "Element_P3"

/** 
 *  Parameters
 */
real dt = 0.05;  // time intervel
int n0 = 128; // mesh number
real time = 2.5; // evolution time
bool debug = true;

/** 
 *  generator border and mesh
 */
// border
border C0(t=-1, 1){x=t; y=-1; label=0;};
border C1(t=-1, 1){x=1; y=t; label=1;};
border C2(t=-1, 1){x=-t; y=1; label=2;};
border C3(t=-1, 1){x=-1; y=-t; label=3;};
// mesh
mesh Th = buildmesh(C0(n0)+C1(n0)+C2(n0)+C3(n0));
string meshName = "MeshNum_"+n0+".ps";
plot(Th, wait = debug, ps = meshName);

/** 
 *  Fespace 
 */
fespace Vh(Th, P3);

Vh theta = cos(2*pi*x)*cos(pi*y)+0.5*cos(3*pi*y)+x+y;   // initial distribution
Vh theta0;  // assistant distribution
// string initialName = "initialDistribution"+".ps";
plot(theta, wait=true, fill = true);        //ps = initialName);

/** 
 *  measure to be hold  
 */
real l20 = int2d(Th) (theta*theta);
int itmax = time/dt; 
real[int] itplot(itmax);
real[int] l2(itmax);
real[int] mixnorm(itmax);

/** 
 *  Time loop
 */
real t = 0.;
for(int m = 0; m < itmax; m++) {
    // Update
    t += dt; 
    itplot[m] = m;

    real avg = int2d(Th)(theta);
    l2[m] = int2d(Th)((theta-avg)*(theta-avg));

    /**
      * Solve a Poisson equation with pure Neumann boundary condition 
        -(\Delta)(\varphi)=-\nabla\cdot\u:=f
        du/dn = 0 on partial_Omega
        \int_{\varphi}dx=0
    */

    // get varphi
    int n = Vh.ndof;
    int n1 = n+1;

    Vh varphi,v;              // unknown and test function. 
    Vh f=-theta;                //  right hand side function 
    
    varf va(varphi,v) =                    //  definition of  the problem 
        int2d(Th)( dx(varphi)*dx(v) + dy(varphi)*dy(v) ) //  bilinear form
    ;
    varf vL(varphi,v)=  int2d(Th)(f*v);
    varf vb(varphi,v)= int2d(Th)(1.*v);

    matrix A=va(Vh,Vh);

    real[int] b(n);
    b = vL(0,Vh);

    real[int]  B = vb(0,Vh); 	
    // the block matrix

    matrix AA = [ [ A ,  B ] ,
                [ B', 0 ] ] ;

    real[int]  bb(n+1),xx(n+1),b1(1),l(1);
    b1=0;
    // build the block rhs 
    bb = [ b, b1];
    set(AA,solver=sparsesolver);
    xx = AA^-1*bb; // solve the linear system

    [varphi[],l] = xx;  // set the value, varphi is the varphi that we need.  



}