load "Element_P3"

/** 
 *  Parameters
 */
real dt = 0.01;  // time intervel
int n0 = 100; // mesh number
real time = 8; // evolution time
bool debug = true;

/** 
 *  generator border and mesh
 */


border C(t=0, 2*pi){x=cos(t); y=sin(t);}
mesh Th = buildmesh(C(256));

string meshName = "MeshNum_"+n0+".ps";
plot(Th, wait = debug, ps = meshName);

/** 
 *  Fespace 
 */
fespace Vh(Th, P3);

Vh theta = sin(pi*x);   // initial distribution
Vh theta0;  // assistant distribution
// string initialName = "initialDistribution"+".ps";
plot(theta, wait=true, fill = true);        //ps = initialName);

/** 
 *  measure to be hold  
 */
real l20 = int2d(Th) (theta*theta);
int itmax = time/dt; 
real[int] itplot(itmax);
real[int] l1(itmax);
real[int] l2(itmax);
real[int] var(itmax);
real[int] mixnorm(itmax);

/** 
 *  Time loop
 */
real t = 0.;

for(int m = 0; m < itmax; m++) {

    /*
     * Update and record some value needed
     */

    t += dt; 
    itplot[m] = m;

    real avg = int2d(Th)(theta);
    l1[m] = avg;
    var[m] = int2d(Th)((theta-avg)*(theta-avg));
    l2[m] = int2d(Th)((theta)*(theta));

    if ((m % 50) == 0) {
        string filename = "q_time_"+m+".ps";
        plot ( theta,  fill = true, ps = filename );
    }

    /* ----------------------------------------------------------------------- */

    /**
      * Solve a Poisson equation with pure Neumann boundary condition 
        -(\Delta)(\varphi)=-\nabla\cdot\u:=f
        du/dn = 0 on partial_Omega
        \int_{\varphi}dx=0
    */

    // get varphi
    int n = Vh.ndof;
    int n1 = n+1;

    Vh varphi, v;              // unknown and test function. 
    Vh f = -theta;                //  right hand side function 
    
    varf va(varphi,v) =                    //  definition of  the problem 
        int2d(Th)( dx(varphi)*dx(v) + dy(varphi)*dy(v) ) //  bilinear form
    ;
    varf vL(varphi,v)=  int2d(Th)(f*v);
    varf vb(varphi,v)= int2d(Th)(1.*v);

    matrix A = va(Vh, Vh);

    real[int] b(n);
    b = vL(0,Vh);

    real[int]  B = vb(0,Vh); 	
    // the block matrix

    matrix AA = [ [ A ,  B ] ,
                [ B', 0 ] ] ;

    real[int]  bb(n+1),xx(n+1),b1(1),l(1);
    b1=0;
    // build the block rhs 
    bb = [ b, b1];
    set(AA,solver=sparsesolver);
    xx = AA^-1*bb; // solve the linear system

    [varphi[],l] = xx;  // set the value, varphi is the varphi that we need. 

    mixnorm[m] = int2d(Th)(dx(varphi)*dx(varphi)+dy(varphi)*dy(varphi));


    /* ----------------------------------------------------------------------- */

    /* 
     * get projection 
     */

    Vh u1 = theta*(dx(varphi));
    Vh u2 = theta*(dy(varphi));

    Vh uh;              
    f = -dx(u1)-dy(u2);               

    varf vLP(varphi,v) =  int2d(Th)(f*v);
    b = vLP(0,Vh);
    bb = [ b, b1];

    set(AA,solver=sparsesolver);
    xx = AA^-1*bb;

    xx = AA^-1*bb; 
    [uh[],l] = xx;  

    // projection
    Vh up1, up2;
    up1 = u1-dx(uh);
    up2 = u2-dy(uh);


    /* ----------------------------------------------------------------------- */

    /* 
     * Inverse Lapalacian 1
     */
    
    Vh u11;              
    f = -up1;

    varf vLP1(varphi,v) =  int2d(Th)(f*v);
    b = vLP1(0,Vh);
    bb = [ b, b1];

    set(AA,solver=sparsesolver);
    xx = AA^-1*bb;

    xx = AA^-1*bb; 
    [u11[],l] = xx;

    // split

    Vh u12;              
    f = -up2;

    varf vLP2(varphi,v) =  int2d(Th)(f*v);
    b = vLP2(0,Vh);
    bb = [b, b1];

    set(AA, solver=sparsesolver);
    xx = AA^-1*bb;

    xx = AA^-1*bb; 
    [u12[],l] = xx;

    /* -------------------------------------------- */

    /* 
     * get norm
     */

    real l2norm = sqrt(int2d(Th)(dx(u11)*dx(u11) + dy(u11)*dy(u11) + dx(u12)*dx(u12) + dy(u12)*dy(u12)));
    l2norm = l2norm/2;

    u11 = -u11/l2norm;
    u12 = -u12/l2norm;

    /* convection */

    theta0 = theta;
    theta = convect([u11, u12], -dt, theta0);

    // Plot
    plot(theta, cmm=" t="+t+", min="+theta[].min+", max="+theta[].max, fill = true, value=true); 
    
}

plot ( [itplot, l1], value = true, cmm = "l1 iteration", ps = "l1_histogram.ps", wait=true);
plot ( [itplot, l2], value = true, cmm = "l2 iteration", ps = "l2_histogram.ps", wait=true);
plot ( [itplot, mixnorm], value = true, cmm = "mixnorm iteration", ps = "mixnorm_histogram.ps" );


//
//  Write a file.
//
ofstream ofl ( "l1norm_histogram.txt" );
for ( int it = 0; it < itmax; it++ ) 
{
  ofl << itplot[it] << " " << l1[it] << endl;
}

ofstream of ( "l2norm_histogram.txt" );
for ( int it = 0; it < itmax; it++ ) 
{
  of << itplot[it] << " " << l2[it] << endl;
}

ofstream norm ( "mixnorm_histogram.txt" );
for ( int it = 0; it < itmax; it++ ) 
{
  norm << itplot[it] << " " << mixnorm[it] << endl;
}

ofstream ofvar ( "var_histogram.txt" );
for ( int it = 0; it < itmax; it++ ) 
{
  of << itplot[it] << " " << var[it] << endl;
}


//
//  Terminate.
//